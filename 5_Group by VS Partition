GROUP BY
1. What is the purpose of the GROUP BY clause in SQL, and how is it different from the ORDER BY clause?
	GROUP BY clause groups rows together based on common values in a column. This can be used to summarize data or to perform aggregate functions. 
	ORDER BY clause sorts rows in a specific order. This can be used to sort rows by the values in a column, or by the results of an aggregate function.

2. Explain the difference between aggregate functions and regular functions in SQL. Provide examples of each.
	Aggregate functions operate on multiple rows and return a single value.
Examples: COUNT(), SUM(), AVG(), MAX(), MIN()
	Regular functions operate on a single row and return a single value.
Examples: LOWER(), UPPER(), SUBSTRING(), CONCAT()

3. How does the HAVING clause differ from the WHERE clause? When would you use one over the other?
	WHERE clause filters rows before aggregation. The WHERE clause is typically used to filter rows based on the values in a single column.
	HAVING clause filters groups after aggregation. The HAVING clause is typically used to filter groups based on the results of an aggregate function.

4. Can you use an alias in the GROUP BY clause? If so, explain how it works.
	Yes, you can use an alias in the GROUP BY clause.
	The alias is used to give a descriptive name to the column that is created by the GROUP BY clause.
	Column aliases can be used with GROUP BY and ORDER BY clauses. We cannot use a column alias with WHERE and HAVING clauses.

5. Describe the order of execution in a SQL query containing the GROUP BY clause.
	The FROM clause is executed first. This clause specifies the tables that are used in the query.
	The WHERE clause is executed next. This clause is used to filter rows before aggregation.
	The GROUP BY clause is executed third. This clause is used to group rows together based on common values in a column.
	The aggregate functions are executed last. This is because the aggregate functions need to be applied to the groups that have been created by the GROUP BY clause.

6. Can you use an aggregate function without using the GROUP BY clause? If yes, explain with examples.
	Yes, you can use an aggregate function without using the GROUP BY clause, but only if you want to calculate a single value for the entire result set. 
	If you use an aggregate function without the GROUP BY clause, the aggregate function will be applied to the entire result set. 
	This means that the aggregate function will return a single value for the entire result set.

7. How do you handle NULL values when using aggregate functions with GROUP BY?
	NULL values are ignored by aggregate functions in the GROUP BY clause. This means that the aggregate function will not be applied to rows that contain NULL values.
8. Explain the role of the COUNT(), SUM(), AVG(), MIN(), and MAX() functions in conjunction with GROUP BY.
	The COUNT() function can be used to count the number of rows in a table.
	The SUM() function can be used to calculate the sum of the values in a column.
	The AVG() function can be used to calculate the average of the values in a column.
	The MAX() function can be used to find the maximum value in a column.
	The MIN() function can be used to find the minimum value in a column.
	The COUNT(), SUM(), AVG(), MIN(), and MAX() functions are aggregate functions that can be used to summarize data in groups.
	The GROUP BY clause is used to group rows together based on common values in a column

9. What are the restrictions on using non-aggregated columns in the SELECT clause when the GROUP BY clause is present?
	When you use the GROUP BY clause, the rows in the result set are grouped together based on the values in the columns that are specified in the GROUP BY clause. This means that the non-aggregated columns in the SELECT clause must be unique for each group.
10. Can you use multiple columns in the GROUP BY clause? If so, how does it affect the grouping and results?
	Yes, you can use multiple columns in the GROUP BY clause.
	The rows are grouped together based on the values in the columns that are specified in the GROUP BY clause. This means that the rows that are grouped together must have the same values in all of the columns that are specified in the GROUP BY clause.


11. How would you find the second highest or second lowest value in a specific column using the GROUP BY clause?
	Use the OVER() clause with the ROW_NUMBER() function.
	The ROW_NUMBER() function assigns a sequential number to each row in the result set, starting from 1.
	The following query will find the second-highest salary in the employee's table:
	SELECT salary,
       ROW_NUMBER() OVER (ORDER BY salary DESC) AS row_number
FROM employees
GROUP BY salary
HAVING row_number = 2;
	This query uses the OVER() clause with the ROW_NUMBER() function to assign a sequential number to each row in the result set, starting from 1. The GROUP BY clause is used to group the rows together based on the salary column. The HAVING clause is used to filter the results so that only the rows with the second-highest salary are returned.

12. In which situations would you consider using the ROLLUP or CUBE extensions in conjunction with GROUP BY?
	ROLLUP: The ROLLUP extension to the GROUP BY clause is used to calculate subtotals and grand totals for a set of columns.
	CUBE: The CUBE extension to the GROUP BY clause is used to calculate all possible subtotals and grand totals for a set of columns.

13. How do you filter groups based on certain criteria using the GROUP BY and HAVING clauses together?
	GROUP BY clause: The GROUP BY clause is used to group rows together based on common values in a column.
	HAVING clause: The HAVING clause is used to filter groups based on the results of aggregate functions.


14. Can you nest GROUP BY clauses to achieve multi-level grouping? Provide an example.
	Yes, you can nest GROUP BY clauses to achieve multi-level grouping.
	The GROUP BY clauses are evaluated from the innermost to the outermost.

PARTITION BY

1. What is the purpose of the PARTITION BY clause in SQL, and how does it differ from the GROUP BY clause?
	The PARTITION BY clause is used to divide the result set into partitions before applying aggregate functions.
	The GROUP BY clause is used to group rows together based on common values in a column and then apply aggregate functions.

2. Can you explain the concept of window functions and provide examples of their usage with the PARTITION BY clause?
	Window functions are functions that operate on a window of rows, rather than on the entire result set.
	The PARTITION BY clause is used to divide the result set into partitions before applying window functions.
	For example, the following query will calculate the running total of salaries for each department in the employee’s table:
	SELECT department,
       SUM(salary) OVER (PARTITION BY department ORDER BY hire_date) AS running_total
FROM employees;
	This query will first divide the result set into partitions based on the department column. 
	Then, the SUM() window function will be applied to each partition, and the results will be sorted by the hire_date column.

3. How do you control the ordering of rows within each partition when using the PARTITION BY clause with window functions?
	OVER() clause: The OVER() clause is used to define the window over which a window function operates.
	ORDER BY clause: The ORDER BY clause specifies the order in which the rows in the result set are sorted.

4. How would you find the row with the maximum value in a specific column within each partition using the PARTITION BY clause?
	OVER() clause: The OVER() clause is used to define the window over which a window function operates.
	MAX() function: The MAX() function returns the maximum value in a column.
	SELECT department,
       employee_id,
       salary,
       MAX(salary) OVER (PARTITION BY department) AS max_salary
FROM employees;
	This query will first divide the result set into partitions based on the department column. 
	Then, the MAX() function will be applied to the salary column within each partition. 
	The results will include the employee_id and salary columns for the row with the maximum salary in each partition.

5. How can you calculate the cumulative sum of a column within each partition using window functions?
	The SUM() function can be used within the OVER() clause with the ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW clause 
	to calculate the cumulative sum of a column within each partition. For example, the following query will calculate 
	the cumulative sum of salaries for each employee in the employee's table:
	SELECT employee_id,
       salary,
      SUM(salary) OVER (PARTITION BY employee_id ORDER BY hire_date) AS cumulative_salary
FROM employees;
	This query will first divide the result set into partitions based on the employee_id column. 
	Then, the SUM() function will be applied to the salary column within each partition, and the results will be sorted by the hire_date column. 
	The results will include the employee_id and salary columns for each employee, along with the cumulative sum of salaries for that employee

6. Provide an example of how to rank rows within each partition based on a specific column using the PARTITION BY clause.
	SELECT department,
       employee_id,
       salary,
       RANK() OVER (PARTITION BY department ORDER BY salary DESC) AS rank
	FROM employees;
	This query will first divide the result set into partitions based on the department column. 
	Then, the RANK() function will be applied to the salary column within each partition. 
	The RANK() function will assign a rank to each row within the partition, starting from 1. 
	The results will include the department and employee_id columns for each employee, along with the rank of the employee's salary within their department.

7. What are the differences between the PARTITION BY clause and using subqueries or common table expressions for similar tasks?
	The PARTITION BY clause divides the result set into partitions before applying aggregate functions, while subqueries and 
	common table expressions return a separate table.
	The PARTITION BY clause can be used with window functions, while subqueries and common table expressions cannot.

